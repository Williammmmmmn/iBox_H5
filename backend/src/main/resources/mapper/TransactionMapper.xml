<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.joon.ibox_back_end.wallet.mapper.TransactionMapper">

    <resultMap id="TransactionResultMap" type="com.joon.ibox_back_end.wallet.entity.TransactionRecordDto">
        <id column="id" property="id"/>
        <result column="nft_id" property="nftId"/>
        <result column="from_address" property="fromAddress"/>
        <result column="to_address" property="toAddress"/>
        <result column="transaction_hash" property="transactionHash"/>
        <result column="price" property="price"/>
        <result column="currency" property="currency"/>
        <result column="transaction_date" property="transactionDate"/>
        <result column="type" property="type"/>
        <result column="purchase_request_id" property="purchaseRequestId"/>
        <result column="instance_id" property="instanceId"/>
    </resultMap>

    <select id="findByWalletAddress" resultMap="TransactionResultMap">
        SELECT
            id, nft_id, from_address, to_address, transaction_hash,
            price, currency, transaction_date, purchase_request_id, instance_id,
            CASE
                WHEN to_address = #{walletAddress} THEN 'PURCHASE'
                WHEN from_address = #{walletAddress} THEN 'SALE'
                END as type,
            NULL AS updated_at  -- 添加一个统一的字段，确保查询列数一致
        FROM transactions
        WHERE from_address = #{walletAddress} OR to_address = #{walletAddress}

        UNION ALL

        SELECT
            pr.id,
            pr.nft_id,
            pr.buyer_address AS from_address,
            '' AS to_address,
            '' AS transaction_hash,
            pr.price,
            pr.currency,
            pr.updated_at AS transaction_date,
            NULL AS purchase_request_id,
            pr.instance_id,
            CASE
                WHEN pr.status = 'requesting' THEN 'PURCHASE_REQUEST'  -- 求购中
                WHEN pr.status = 'canceled' THEN 'PURCHASE_REFUND'     -- 求购取消
                END as type,
            pr.updated_at  -- 这里返回更新的时间字段
        FROM purchase_requests pr
        WHERE pr.buyer_address = #{walletAddress}
          AND (pr.status = 'requesting' OR pr.status = 'canceled')  -- 不查询 completed

        ORDER BY
            CASE
                WHEN type = 'PURCHASE_REFUND' THEN 1
                WHEN type = 'PURCHASE_REQUEST' THEN 2
                ELSE 3
                END,
            transaction_date DESC,
            updated_at DESC;  -- 使用统一的排序字段


    </select>

    <insert id="create" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO transactions (
            nft_id, to_address, price,
            type, order_id, instance_id,
            transaction_date, transaction_hash, currency
        ) VALUES (
                     #{nftId}, #{toAddress}, #{price},
                     #{type}, #{orderId}, #{instanceId},
                     #{transactionDate},
                     #{transactionHash, jdbcType=VARCHAR},
                     #{currency, jdbcType=VARCHAR}
                 )
    </insert>

    <insert id="batchCreate" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO transactions (
        nft_id, to_address, price,
        type, order_id, instance_id,
        transaction_date, transaction_hash, currency
        ) VALUES
        <foreach collection="transactions" item="item" separator=",">
            (
            #{item.nftId}, #{item.toAddress}, #{item.price},
            #{item.type}, #{item.orderId}, #{item.instanceId},
            #{item.transactionDate},
            #{item.transactionHash, jdbcType=VARCHAR},
            #{item.currency, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <select id="existsByTxHash" resultType="boolean">
        SELECT COUNT(1) > 0 FROM transactions
        WHERE transaction_hash = #{txHash}
    </select>

</mapper>